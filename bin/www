#!/usr/bin/env node

/**
 * Module dependencies.
 */
import "dotenv/config";
import createDebug from "debug";
import http from "node:http";
import { mysqlConnect } from "../src/adapters/config/mysql_config.js";
import { logger } from "../src/utils/logger.js";
import initializeServices from "../src/setup/services.js";
import { createApp } from "../src/app.js";

const debug = createDebug("simple-hostel-api:server");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "3000");

/**
 * Create HTTP server.
 */

const server = http.createServer();
/**
 * Connect to the Database
 */

/**
 * Listen on provided port, on all network interfaces.
 */

async function startServer() {
  try {
    await mysqlConnect.connectPool();
    const services = initializeServices();

    const app = await createApp(services);

    app.set("port", port);

    server.on("request", app);

    server.listen(port, () => console.log(`Server started on port ${port}`));

    server.on("error", onError);
    server.on("listening", onListening);
  } catch (e) {
    logger.error("Fail to start the server", e);
    process.exit(1);
  }
}

await startServer();

process.on("exit", onShutdown);
process.on("SIGTERM", onShutdown);
process.on("SIGINT", onShutdown);
process.on("uncaughtException", onErrorShutdown);
process.on("unhandledRejection", onErrorShutdown);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}

/**
 * Handling shutdowns
 */

async function onShutdown() {
  logger.info("Shutting down the server...");
  await mysqlConnect.disconnect();
  server.close(() => {
    logger.info("Closed out remaining connections");
    process.exit(0);
  });

  setTimeout(() => {
    logger.error("Forcing shutdown");
    process.exit(1);
  }, 10000);
}

async function onErrorShutdown(error) {
  logger.error("An unexpected error occurred", error);
  await mysqlConnect.disconnect();
  process.exit(1);
}
